start with template:
[[1,,,,,,,,,,,,],[2,,,,,,,,,,,,],[3,4,,,,,,,,,,,],[5,6,,,,,,,,,,,],[7,8,,,,,,,,,,,],[9,10,11,,,,,,,,,,],]

try adding the next member number/group to the first null:
[[1,12,,,,,,,,,,,],[2,,,,,,,,,,,,],[3,4,,,,,,,,,,,],[5,6,,,,,,,,,,,],[7,8,,,,,,,,,,,],[9,10,11,,,,,,,,,,],]

if that evaluation set is valid and a team was filled, check the team
	if it passes and all members are placed, store the evaluation set then what?
	if it passes and members need to placed, go to the next spot and add the next member number/group (step 1)
	if it fails, then what? 

if that evaluation set is valid and a team was not filled, go to the next spot and add the next member number/group (step 1)

if that evaluation set is not valid and the member/number added is not the last, stay in the previous spot and add the next member number/group (step 1)

if that evaluation set is not valid and the member/number added is the last, set the current spot to null then go to the previous spot and add the next member number/group (step 1)

------------------------------------------------------------------------------------------------------

start with initial set:
[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,...},{27,...],[40,...],[53,...,64,65],[66,67,68,69,70,71,72,73,74,75,76,77,null]]

Evaluate teams 6 through 1.  
	If team 6 is invalid, change team 5.
	If a team is invalid and its highest number is not 77, swap its highest number for the next number and reevaluate teams (step 1).
	If a team is invalid and its highest number is 77, swap 77 for null and reevaluate teams (step 1).
		ex.: [[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,...},{27,...],[40,...],[53,...,64,77],[65,66,67,68,69,70,71,72,73,74,75,76,null]]
	If a team is invalid and has a null but not 77, swap its highest number and null for the next two numbers and reevaluate teams (step 1).
		ex.: [[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,...},{27,...],[40,...],[53,...,64,null],[65,66,67,68,69,70,71,72,73,74,75,76,77]]
	If a team is invalid and has a null and 66-77, end. 
	If a team is invalid and has a null and 77, find the first number not in a sequence with 77 (73-77) and swap it for the next number

Wait!  I don't think this will work for captain placement.
--------------
[1,2,3,4]	
			anchor = 3, pivot = 3; increment spot[pivot] then sort subsequent spots ----------swap spot[pivot] for spot[pivot+1]
[1,2,4,3]	
			anchor = 3, pivot = 3; spot[anchor] == max => anchor--, pivot = max-1, spot[anchor]++ then sort subsequent spots
[1,3,2,4]	
			anchor = 2, pivot = 3; increment spot[pivot] then sort subsequent spots
[1,3,4,2]	
			anchor = 2, pivot = 3; spot[pivot] == max => pivot--, 
[1,4,2,3]
			anchor = 2, pivot = 3
[1,4,3,2]
			anchor = 1, pivot = 3
[2,1,3,4]
			anchor = 1, pivot = 3
[2,1,4,3]
			anchor = 1, pivot = 3
[2,3,1,4]
			anchor = 1, pivot = 2
[2,3,4,1]
			anchor = 1, pivot = 
[2,4,1,3]
			anchor = 1, pivot = 3
[2,4,3,1]
			anchor = 1, pivot = 

---------------------
I can't think of any way to do this for n-elements except through recursion.  Recursion would involve generating all 10^50 possibilities, which is infeasible.

The only other approach I can think of is to select 1 random player to each team.  Then, for each team based on average, if the team average is below the league average, add the highest player; if above the league average, add the lowest player.  Place groups first, then singles.

I guess, I'll just evaluate the other metrics (average male rating, average female rating, top 5) at the end.
Make specific thresholds for each metric.  Allow threshold to be nullable.

